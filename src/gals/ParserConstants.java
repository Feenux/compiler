package gals;

public interface ParserConstants
{
    int START_SYMBOL = 42;

    int FIRST_NON_TERMINAL    = 42;
    int FIRST_SEMANTIC_ACTION = 80;

    int[][] PARSER_TABLE =
    {
        { -1, -1, -1, -1,  0, -1, -1, -1, -1, -1, -1,  0,  0,  0, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,  0, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1 },
        { -1, -1, -1, -1,  2, -1, -1, -1, -1, -1, -1,  2,  2,  2, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,  1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1 },
        { -1, -1, -1, -1,  3, -1, -1, -1, -1, -1, -1,  3,  3,  3, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1 },
        { -1, -1, -1, -1,  5, -1, -1, -1, -1, -1, -1,  5,  5,  5, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,  4, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1 },
        { -1, -1, -1, -1,  6, -1, -1, -1, -1, -1, -1,  6,  6,  6, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1 },
        { -1, -1, -1, -1,  8, -1, -1, -1, -1, -1, -1,  7,  7,  7, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1 },
        { -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 11, 10,  9, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1 },
        { -1, -1, -1, -1, 12, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1 },
        { -1, 13, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1 },
        { -1, -1, -1, -1, 14, -1, -1, -1, -1, -1, -1, 14, 14, 14, -1, -1, -1, -1, -1, -1, -1, -1, -1, 15, -1, -1, 14, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1 },
        { -1, 17, -1, -1, -1, 17, -1, -1, 16, -1, -1, -1, -1, -1, -1, -1, 17, -1, 17, -1, -1, -1, -1, -1, -1, -1, -1, 16, 17, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1 },
        { -1, 18, -1, -1, -1, 18, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 18, -1, 18, -1, -1, -1, -1, -1, -1, -1, -1, -1, 18, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1 },
        { -1, 20, -1, -1, -1, 20, -1, -1, 19, -1, -1, -1, -1, -1, -1, -1, 20, -1, 20, -1, -1, -1, -1, -1, -1, -1, -1, 19, 20, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1 },
        { -1, 21, -1, -1, -1, 25, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 22, -1, 23, -1, -1, -1, -1, -1, -1, -1, -1, -1, 24, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1 },
        { -1, 26, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1 },
        { -1, 27, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1 },
        { -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 28, 29, -1, -1, -1, -1, 28, 28, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1 },
        { -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 30, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1 },
        { -1, 31, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1 },
        { -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 33, -1, -1, -1, -1, -1, 32, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1 },
        { -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 34, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1 },
        { -1, 35, -1, -1, -1, -1, -1, 35, -1, -1, -1, -1, -1, -1, 35, -1, -1, 35, -1, 35, 35, 35, -1, -1, -1, -1, -1, -1, 35, -1, -1, 35, 35, -1, -1, -1, -1, -1, -1, -1, -1 },
        { -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 37, -1, -1, -1, -1, -1, 36, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1 },
        { -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 38, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1 },
        { -1, 39, -1, -1, -1, 39, -1, -1, 39, 40, -1, -1, -1, -1, -1, -1, 39, -1, 39, -1, -1, -1, -1, -1, -1, -1, -1, 39, 39, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1 },
        { -1, -1, -1, -1, -1, 41, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1 },
        { -1, 42, -1, -1, -1, -1, -1, 42, -1, -1, -1, -1, -1, -1, 42, -1, -1, 42, -1, 42, 42, 42, -1, -1, -1, -1, -1, -1, 42, -1, -1, 42, 42, -1, -1, -1, -1, -1, -1, -1, -1 },
        { -1, 43, -1, 44, -1, 43, -1, -1, 43, -1, -1, -1, -1, -1, -1, 45, 43, -1, 43, -1, -1, -1, -1, 43, -1, 43, -1, 43, 43, 43, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1 },
        { -1, 46, -1, -1, -1, -1, -1, 48, -1, -1, -1, -1, -1, -1, 49, -1, -1, 47, -1, 46, 46, 46, -1, -1, -1, -1, -1, -1, 46, -1, -1, 46, 46, -1, -1, -1, -1, -1, -1, -1, -1 },
        { -1, 50, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 50, 50, 50, -1, -1, -1, -1, -1, -1, 50, -1, -1, 50, 50, -1, -1, -1, -1, -1, -1, -1, -1 },
        { -1, 51, -1, 51, -1, 51, -1, -1, 51, -1, -1, -1, -1, -1, -1, 51, 51, -1, 51, -1, -1, -1, -1, 51, -1, 51, -1, 51, 51, 51, -1, -1, -1, -1, -1, 52, 52, 52, 52, 52, 52 },
        { -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 53, 54, 55, 56, 57, 58 },
        { -1, 59, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 59, 59, 59, -1, -1, -1, -1, -1, -1, 59, -1, -1, 59, 59, -1, -1, -1, -1, -1, -1, -1, -1 },
        { -1, 60, -1, 60, -1, 60, -1, -1, 60, -1, -1, -1, -1, -1, -1, 60, 60, -1, 60, -1, -1, -1, -1, 60, -1, 60, -1, 60, 60, 60, -1, 61, 62, -1, -1, 60, 60, 60, 60, 60, 60 },
        { -1, 63, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 63, 63, 63, -1, -1, -1, -1, -1, -1, 63, -1, -1, 63, 63, -1, -1, -1, -1, -1, -1, -1, -1 },
        { -1, 64, -1, 64, -1, 64, -1, -1, 64, -1, -1, -1, -1, -1, -1, 64, 64, -1, 64, -1, -1, -1, -1, 64, -1, 64, -1, 64, 64, 64, -1, 64, 64, 65, 66, 64, 64, 64, 64, 64, 64 },
        { -1, 67, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 68, 69, 70, -1, -1, -1, -1, -1, -1, 71, -1, -1, 72, 73, -1, -1, -1, -1, -1, -1, -1, -1 },
        { -1, 74, -1, 74, -1, 74, -1, -1, 74, -1, -1, -1, -1, -1, -1, 74, 74, -1, 74, -1, -1, -1, -1, 74, 75, 74, -1, 74, 74, 74, -1, 74, 74, 74, 74, 74, 74, 74, 74, 74, 74 }
    };

    int[][] PRODUCTIONS = 
    {
        {  95,  43,  27,  52,  28,  96 },
        {   0 },
        {  44 },
        {  46,  45 },
        {   0 },
        {  44 },
        {  47, 181,  23,  50, 183 },
        {  48 },
        {  49 },
        {  14 },
        {  13 },
        {  12 },
        {   5,  25,  48,  24,  20,  26 },
        {   2, 182,  51 },
        {   0 },
        {  24,  50 },
        {   0 },
        {  53 },
        {  55,  54 },
        {   0 },
        {  53 },
        {  56 },
        {  59 },
        {  62 },
        {  65 },
        {  67 },
        {  57,  31,  68, 186 },
        {   2, 182,  58 },
        {   0 },
        {  25,  68,  26 },
        {  17,  29,  60, 184,  30 },
        {  57,  61 },
        {   0 },
        {  24,  60 },
        {  19,  29,  63,  30 },
        {  68,  94,  64 },
        {   0 },
        {  24,  63 },
        {  29,  68, 187,  30,  11,  27,  52,  28,  66, 188 },
        {   0 },
        { 189,  10,  27,  52,  28 },
        { 190,   6,  27,  52,   9,  29,  68, 191,  30,   7,  52,  28, 192 },
        {  70,  69 },
        {   0 },
        {   4,  70,  97,  69 },
        {  16,  70,  98,  69 },
        {  71 },
        {  18,  91 },
        {   8,  92 },
        {  15,  70,  93 },
        {  74,  72 },
        {   0 },
        {  73,  89,  74,  90 },
        {  36 },
        {  37 },
        {  38 },
        {  39 },
        {  40 },
        {  41 },
        {  76,  75 },
        {   0 },
        {  32,  76,  81,  75 },
        {  33,  76,  82,  75 },
        {  78,  77 },
        {   0 },
        {  34,  78,  83,  77 },
        {  35,  78,  84,  77 },
        {   2, 185,  79 },
        {  20,  86 },
        {  21,  99 },
        {  22, 100 },
        {  29,  68,  30 },
        {  32,  78,  87 },
        {  33,  78,  88 },
        {   0 },
        {  25,  68,  26 }
    };

    String[] PARSER_ERROR =
    {
        "",
        "esperado fim de programa",
        "esperado identificador",
        "esperado reservada",
        "esperado and",
        "esperado array",
        "esperado do",
        "esperado exit",
        "esperado false",
        "esperado if",
        "esperado ifFalseDo",
        "esperado ifTrueDo",
        "esperado literal",
        "esperado logical",
        "esperado number",
        "esperado not",
        "esperado or",
        "esperado read",
        "esperado true",
        "esperado write",
        "esperado constante numerica",
        "esperado constante caractere",
        "esperado constante literal",
        "esperado \":\"",
        "esperado \",\"",
        "esperado \"[\"",
        "esperado \"]\"",
        "esperado \"{\"",
        "esperado \"}\"",
        "esperado \"(\"",
        "esperado \")\"",
        "esperado \":=\"",
        "esperado \"+\"",
        "esperado \"-\"",
        "esperado \"*\"",
        "esperado \"/\"",
        "esperado \"=\"",
        "esperado \"!=\"",
        "esperado \"<\"",
        "esperado \"<=\"",
        "esperado \">\"",
        "esperado \">=\"",
        "esperado array literal logical number {",// "<program> inv√°lido",
        "esperado array literal logical number {",// "<declaracao_variaveis_opt> inv√°lido",
        "esperado array literal logical number",// "<declaracao_variaveis> inv√°lido",
        "esperado array literal logical number {",// "<declaracao_variaveis_1> inv√°lido",
        "esperado array literal logical number",// "<variavel> inv√°lido",
        "esperado array literal logical number",// "<tipo> inv√°lido",
        "esperado literal logical number",// "<tipo_simples> inv√°lido",
        "esperado array",// "<array> inv√°lido",
	    "esperado identificador ", // "<lista_identificadores> inv√°lido",
	    "esperado array literal logical number , {" ,// "<lista_identificadores_1> inv√°lido",
	    "esperado identificador do if read write } (" ,// "<lista_comandos_opt> inv√°lido",
	    "esperado identificador do read write (", // "<lista_comandos> inv√°lido",
	    "esperado identificador do if read write } (", // "<lista_comandos_1> inv√°lido",
	    "esperado identificador do read write (", // "<comando> inv√°lido",
	    "esperado identificador",// "<atribuicao> inv√°lido",
	    "esperado identificador", // "<identificador_complexo> inv√°lido",
	     "esperado , [ ) :=", // "<acesso_array> inv√°lido",
	     "esperado read",// "<entrada_dados> inv√°lido",
	     "esperado identificador",// "<lista_identificadores_complexos> inv√°lido",
	     "esperado , )", // "<lista_identificadores_complexos_1> inv√°lido",
	     "esperado write", // "<saida_dados> inv√°lido",
	     "esperado expressao", // "<lista_expressoes> inv√°lido",
	     "esperado , )",// "<lista_expressoes_1> inv√°lido",
	     "esperado (", // "<selecao> inv√°lido",
	     "esperado identificador do if ifFalseDo read write } (",// "<selecao_false> inv√°lido",
	     "esperado do",// "<repeticao> inv√°lido",
	     "esperado expressao",// "<expressao> inv√°lido",
	     "esperado expressao",// "<expressao_1> inv√°lido",
	     "esperado expressao",// "<elemento> inv√°lido",
	     "esperado expressao",// "<relacional> inv√°lido",
	     "esperado expressao",// "<relacional_1> inv√°lido",
	     "esperado expressao",// "<operador_relacional> inv√°lido",
	     "esperado expressao",// "<aritmetica> inv√°lido",
	     "esperado expressao", // "<aritmetica_1> inv√°lido",
	     "esperado expressao",// "<termo> inv√°lido",
	     "esperado expressao",// "<termo_1> inv√°lido",
	     "esperado expressao",// "<fator> inv√°lido",
	     "esperado expressao"// "<fator_1> inv√°lido"
    };
}
